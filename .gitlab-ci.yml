stages:
  - prepare
  - test
  - build:frontend
  - build:docker
  - test:containers
  - deploy

variables:
  K8_NAMESPACE: covid-19-vis
  STAGING_BRANCH: main
  URL_SUFFIX: coronavis.dbvis.de

###########################################
# DEFINE BRANCH TRIGGER RULES
###########################################

#--------------------
# Deployment
#--------------------

.rules-backend: &rules-backend
  rules:     
  # do not run pipelines for merge requests (gets rid of "detatched pipelines")
  - if: $CI_MERGE_REQUEST_ID
    when: never
  # if this is set, run this job all the time
  - if: $RUN_ALWAYS == "yes"
    when: on_success
  # run if files changed
  # and if it should run on a feature branch or it should run on main
  # - changes:
  #     # - Backend/**/*
  #     # - k8/Backend/**/*
  #     # - .gitlab-ci.yml
  - if: $RUN_ON_FB == "yes" && $CI_COMMIT_BRANCH != $STAGING_BRANCH && $CI_COMMIT_TAG == null
    when: on_success
  # - changes:
  #     - Backend/**/*
  #     - k8/Backend/**/*
  #     - .gitlab-ci.yml
  - if: $RUN_ON_MAIN == "yes" && $CI_COMMIT_BRANCH == $STAGING_BRANCH
    when: on_success
  # run if tagged
  - if: $RUN_ON_TAG == "yes" && $CI_COMMIT_TAG =~ /^v.*/
    when: on_success
  # default is on_success, so explicitly set job not to run if none of the above rules matched
  - when: never

.rules-frontend: &rules-frontend
  rules:     
  # do not run pipelines for merge requests (gets rid of "detatched pipelines")
  - if: $CI_MERGE_REQUEST_ID
    when: never
  # if this is set, run this job all the time
  - if: $RUN_ALWAYS == "yes"
    when: on_success
  # run if files changed
  # and if it should run on a feature branch or it should run on main
  # - changes:
  #     - Frontend/**/*
  #     - k8/Frontend/**/*
  #     - .gitlab-ci.yml
  - if: $RUN_ON_FB == "yes" && $CI_COMMIT_BRANCH != $STAGING_BRANCH && $CI_COMMIT_TAG == null
    when: on_success
  # - changes:
  #     - Frontend/**/*
  #     - k8/Frontend/**/*
  #     - .gitlab-ci.yml
  - if: $RUN_ON_MAIN == "yes" && $CI_COMMIT_BRANCH == $STAGING_BRANCH
    when: on_success
  # run if tagged
  - if: $RUN_ON_TAG == "yes" && $CI_COMMIT_TAG =~ /^v.*/
    when: on_success
  # default is on_success, so explicitly set job not to run if none of the above rules matched
  - when: never

.rules-crawler: &rules-crawler
  rules:     
  # do not run pipelines for merge requests (gets rid of "detatched pipelines")
  - if: $CI_MERGE_REQUEST_ID
    when: never
  # if this is set, run this job all the time
  - if: $RUN_ALWAYS == "yes"
    when: on_success
  # run if files changed
  # and if it should run on a feature branch or it should run on main
  # - changes:
  #     - Crawler/**/*
  #     - k8/Crawler/**/*
  #     - k8/crawler-new/**/*
  #     - .gitlab-ci.yml
  - if: $RUN_ON_FB == "yes" && $CI_COMMIT_BRANCH != $STAGING_BRANCH && $CI_COMMIT_TAG == null
    when: on_success
  # - changes:
  #     - Crawler/**/*
  #     - k8/Crawler/**/*
  #     - k8/crawler-new/**/*
  #     - .gitlab-ci.yml
  - if: $RUN_ON_MAIN == "yes" && $CI_COMMIT_BRANCH == $STAGING_BRANCH
    when: on_success
  # run if tagged
  - if: $RUN_ON_TAG == "yes" && $CI_COMMIT_TAG =~ /^v.*/
    when: on_success
  # default is on_success, so explicitly set job not to run if none of the above rules matched
  - when: never


.rules-tiles: &rules-tiles
  rules:     
  # do not run pipelines for merge requests (gets rid of "detatched pipelines")
  - if: $CI_MERGE_REQUEST_ID
    when: never
  # if this is set, run this job all the time
  - if: $RUN_ALWAYS == "yes"
    when: on_success
  # run if files changed
  # and if it should run on a feature branch or it should run on main
  - if: $RUN_ON_FB == "yes" && $CI_COMMIT_BRANCH != $STAGING_BRANCH && $CI_COMMIT_TAG == null
    changes:
    - "Tiles/**/*"
    - "k8/tiles-new/**/*"
    - .gitlab-ci.yml
    when: manual
  - if: $RUN_ON_MAIN == "yes" && $CI_COMMIT_BRANCH == $STAGING_BRANCH
    changes:
      - "Tiles/**/*"
      - "k8/tiles-new/**/*"
      - .gitlab-ci.yml
    when: manual
  # run if tagged
  - if: $RUN_ON_TAG == "yes" && $CI_COMMIT_TAG =~ /^v.*/
    changes:
     - "Tiles/**/*"
     - "k8/tiles-new/**/*"
     - .gitlab-ci.yml
    when: manual
  # default is on_success, so explicitly set job not to run if none of the above rules matched
  - when: never

#--------------------
# Environment Cleanup
#--------------------


.rules-backend-cleanup: &rules-backend-cleanup
  rules:
    # do not run pipelines for merge requests (gets rid of "detatched pipelines")
    - if: $CI_MERGE_REQUEST_ID
      when: never
    # if this is set, run this job all the time
    - if: $RUN_ALWAYS == "yes"
      when: manual
    # run if files changed
    # and if it should run on a feature branch or it should run on main
    # - changes:
    #     - Backend/**/*
    #     - k8/Backend/**/*
    #     - .gitlab-ci.yml
    - if: $RUN_ON_FB == "yes" && $CI_COMMIT_BRANCH != $STAGING_BRANCH && $CI_COMMIT_TAG == null
      when: manual
      allow_failure: true
    # - changes:
    #     - Backend/**/*
    #     - k8/Backend/**/*
    #     - .gitlab-ci.yml
    - if: $RUN_ON_MAIN == "yes" && $CI_COMMIT_BRANCH == $STAGING_BRANCH
      when: manual
      allow_failure: true
    # default is on_success, so explicitly set job not to run if none of the above rules matched
    - when: never

.rules-frontend-cleanup: &rules-frontend-cleanup
  rules:
    # do not run pipelines for merge requests (gets rid of "detatched pipelines")
    - if: $CI_MERGE_REQUEST_ID
      when: never
    # if this is set, run this job all the time
    - if: $RUN_ALWAYS == "yes"
      when: manual
    # run if files changed
    # and if it should run on a feature branch or it should run on main
    # - changes:
    #     - Frontend/**/*
    #     - k8/Frontend/**/*
    #     - .gitlab-ci.yml
    - if: $RUN_ON_FB == "yes" && $CI_COMMIT_BRANCH != $STAGING_BRANCH && $CI_COMMIT_TAG == null
      when: manual
      allow_failure: true
    # - changes:
    #     - Frontend/**/*
    #     - k8/Frontend/**/*
    #     - .gitlab-ci.yml
    - if: $RUN_ON_MAIN == "yes" && $CI_COMMIT_BRANCH == $STAGING_BRANCH
      when: manual
      allow_failure: true
    # default is on_success, so explicitly set job not to run if none of the above rules matched
    - when: never

###########################################
# SETUP ENVIRONMENT VARIALBES
###########################################

export-environment:
  image: debian:stretch-slim
  stage: prepare
  script:
    - echo $CI_COMMIT_BRANCH
    - echo $CI_COMMIT_REF_NAME
    # set the version either as a tag (v0.0.1) or as a commit sha (74bac331)
    - if [[ ${CI_COMMIT_TAG} =~ ^v[0-9]+.[0-9]+.[0-9]+ ]]; then VERSION=${CI_COMMIT_TAG}; else VERSION=${CI_COMMIT_SHORT_SHA}; fi
    # the current URL suffix
    #- URL_SUFFIX="covis.dbvis.de" # defined in the variables section
    # this shortens the slug to 30 characters and removes all trailing dashes
    - SHORTENED_CI_COMMIT_REF_SLUG=$(echo ${CI_COMMIT_REF_SLUG} | tr / - | cut -c -30 |  sed -E 's#-+$##')
    - URL_PREFIX=""
    - FRONTEND_URL_TILES_PREFIX=""
    - URL_PROTOCOL="https"
    - ENV_TYPE="review"
    - REPLICA_COUNT="2"
    - CPU_REQ="200m"
    - CPU_LIMIT="4000m"
    - MEM_REQ="3Gi"
    - MEM_LIMIT="10Gi"
    # multiple things happen here:
    # URL_PREFIX:
    # if tag => ""
    # if main => "staging."
    # if fb => "${CI_COMMIT_REF_SLUG}."
    # Furthermore, the FRONTEND_URL_TILES_PREFIX is set because the tile server will not be deployed on a per fb-basis
    # FRONTEND_URL_TILES_PREFIX:
    # if tag => ""
    # if main => "staging."
    # if fb => "staging."
    # Determine what ENV_TYPE it is (production, staging or review)
    - if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+.[0-9]+.[0-9]+ ]]; then ENV_TYPE="production"; fi
    - if [ "${CI_COMMIT_BRANCH}" == "${STAGING_BRANCH}" ]; then ENV_TYPE="staging"; fi

    # Determine URL, ReplicaCount, and ReleaseName based on ENV_TYPE
    - if [ "${ENV_TYPE}" == "staging" ]; then FRONTEND_URL_TILES_PREFIX="staging."; URL_PREFIX="staging."; REPLICA_COUNT="1"; RELEASE_NAME_RAW="${ENV_TYPE}/$CI_PROJECT_NAME/${CI_COMMIT_REF_SLUG}"; CPU_REQ="50m"; CPU_LIMIT="4000m"; MEM_REQ="1Gi"; MEM_LIMIT="4Gi"; fi
    - if [ "${ENV_TYPE}" == "review" ]; then FRONTEND_URL_TILES_PREFIX="staging."; URL_PREFIX="${SHORTENED_CI_COMMIT_REF_SLUG}."; REPLICA_COUNT="1"; RELEASE_NAME_RAW="${ENV_TYPE}/$CI_PROJECT_NAME/${CI_COMMIT_REF_SLUG}"; CPU_REQ="50m"; CPU_LIMIT="4000m"; MEM_REQ="500Mi"; MEM_LIMIT="4Gi"; fi

    # Build the frontend url: prefix.suffix
    - URL_FRONTEND="${URL_PREFIX}${URL_SUFFIX}"
    # Build the backend url: prefix.api.suffix
    - URL_BACKEND="${URL_PREFIX}api.${URL_SUFFIX}"
    # Build the tiles url: prefix.tiles.suffix
    - URL_TILES="${URL_PREFIX}tiles.${URL_SUFFIX}"
    # This variable is used in the build job to set the api url in the environment.prod.ts
    - FRONTEND_URL_BACKEND="${URL_PREFIX}api.${URL_SUFFIX}"
    # This variable is used in the build job to set the tiles server url in the environment.prod.ts
    - FRONTEND_URL_TILES="${FRONTEND_URL_TILES_PREFIX}tiles.${URL_SUFFIX}"
    # all the stuff into the var.env
    - echo "ENV_TYPE=${ENV_TYPE}" >> var.env
    - echo "VERSION=${VERSION}" >> var.env
    - echo "URL_PROTOCOL=${URL_PROTOCOL}" >> var.env
    - echo "URL_FRONTEND=${URL_FRONTEND}" >> var.env
    - echo "URL_BACKEND=${URL_BACKEND}" >> var.env
    - echo "URL_TILES=${URL_TILES}" >> var.env
    - echo "FRONTEND_URL_BACKEND=${FRONTEND_URL_BACKEND}" >> var.env
    - echo "FRONTEND_URL_TILES=${FRONTEND_URL_TILES}" >> var.env
    - echo "REPLICA_COUNT=${REPLICA_COUNT}" >> var.env
    - echo "CPU_REQ=${CPU_REQ}" >> var.env
    - echo "CPU_LIMIT=${CPU_LIMIT}" >> var.env
    - echo "MEM_REQ=${MEM_REQ}" >> var.env
    - echo "MEM_LIMIT=${MEM_LIMIT}" >> var.env
    # DEBUG
    - cat var.env
  artifacts:
    paths:
      - var.env
    expire_in: 3000 days
  retry: 2
  tags:
    - no-cache

set up sentry release:
  stage: prepare
  image:
    name: getsentry/sentry-cli:2.9.0
    entrypoint: [""]
  variables:
    RUN_ALWAYS: "no"
    RUN_ON_FB: "yes"
    RUN_ON_MAIN: "yes"
    RUN_ON_TAG: "yes"
  script:
    - export SENTRY_AUTH_TOKEN=${SENTRY_AUTH}
    - export SENTRY_ORG=lingvisio
    - sentry-cli releases new -p server "$CI_COMMIT_SHA"
    - sentry-cli releases set-commits "$CI_COMMIT_SHA" --auto --log-level=debug --ignore-missing --ignore-empty
    - sentry-cli releases finalize "$CI_COMMIT_SHA"
    - sentry-cli releases deploys "$CI_COMMIT_SHA" new -e ${CI_COMMIT_REF_NAME}
  dependencies: []
  tags:
    - no-cache
  <<: *rules-frontend
  interruptible: true
  allow_failure: true
  retry: 2

frontend-install-dependencies:
  stage: prepare
  image: node:19
  script:
    - cd ./Frontend/gis
    - yarn config set registry https://nexus.dbvis.de/repository/npmjs/
    # if node_modules does not exist use yarn to create it
    - test -d ./node_modules || yarn --frozen-lockfile --non-interactive --no-progress
  artifacts:
    expire_in: 1 day
    paths:
      - ./Frontend/gis/node_modules
  cache:
    key:
      files:
        - ./Frontend/gis/package.json
        - ./Frontend/gis/yarn.lock
    paths:
      - ./Frontend/gis/node_modules
    policy: pull-push
  needs: []
  retry: 2
  tags:
    - docker

syntax-check-crawler-scripts:
  stage: test
  image: python:3.10-slim
  script:
    - source var.env
    - cd Crawler
    - python -m compileall
  dependencies:
    - export-environment
  needs:
    - export-environment
  retry: 2
  tags:
    - no-cache

frontend-lint:
  stage: test
  image: node:19
  script:
    - cd ./Frontend/gis
    - yarn lint
  dependencies:
    - frontend-install-dependencies
  needs:
    - frontend-install-dependencies
  retry: 2
  tags:
    - no-cache

frontend-code-quality:
  stage: test
  image: docker:latest
  allow_failure: true
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.10-gitlab.1"
  needs: []
  before_script:
    - source ./Frontend/code-quality-env.sh
    - export SOURCE_CODE=$PWD/Frontend/gis
  script:
#    - |
#      if ! docker info &>/dev/null; then
#        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
#          export DOCKER_HOST='tcp://localhost:2375'
#        fi
#      fi
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - |
      docker run \
        $(propagate_env_vars \
          SOURCE_CODE \
          TIMEOUT_SECONDS \
          CODECLIMATE_DEBUG \
          CODECLIMATE_DEV \
          REPORT_STDOUT \
          ENGINE_MEMORY_LIMIT_BYTES \
        ) \
        --volume "$PWD":/code \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 4 weeks
  dependencies: []
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
  retry: 2
  tags:
    - docker-build

check-missing-translations:
  stage: test
  image: node:19
  script:
    - cd ./Frontend/gis
    - yarn extract-i18n
    - git status
    - git diff
    - |
      if [ -z "$(git status --porcelain)" ]; then 
        # Working directory clean
        exit 0
      else 
        # Uncommitted changes
        exit 1
      fi
  dependencies:
    - frontend-install-dependencies
  needs:
    - frontend-install-dependencies
  retry: 2
  tags:
    - no-cache
    

###########################################
# BUILD
###########################################

.build-frontend: &build-frontend
  stage: build:frontend
  image: node:19
  script:
    - source var.env
    - cd ./Frontend
    - export FRONTEND_URL_BACKEND=${URL_BACKEND}
    - export FRONTEND_URL_TILES=${FRONTEND_URL_TILES}
    - export URL_PROTOCOL
    - export VERSION
    - export ENV_TYPE
    - export SENTRY_DSN
    - sh -c ./replace-environment-urls.sh
    - cd ./gis
    - yarn build
  artifacts:
    expire_in: 1 day
    paths:
      - ./Frontend/gis/dist
  cache:
    key: coronavis-angular-cache
    paths:
      - ./Frontend/gis/.angular/
  dependencies:
    - export-environment
    - frontend-install-dependencies
  needs:
    - export-environment
    - frontend-install-dependencies
  retry: 2
  tags:
    - docker

build-frontend:
  extends: .build-frontend

###########################################
# DOCKERIZE
###########################################

.dockerize-template: &dockerize-template
  stage: build:docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # load the var.env variables from the export-environment job
    - source ./var.env
    # Login
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cd ${FOLDER}
    # generate imagename using a lowercased foldername == app
    - IMGNAME=$(echo "${FOLDER}" | tr '[:upper:]' '[:lower:]')
    - IMG="${CI_REGISTRY_IMAGE}/${IMGNAME}:${VERSION}"
    - IMG2="${CI_REGISTRY_IMAGE}/${IMGNAME}:${CI_COMMIT_SHORT_SHA}"
    # build and push :)
    - /kaniko/executor --context . --dockerfile ./Dockerfile --registry-mirror registry-mirror.dbvis.de --build-arg VERSION=${VERSION} --destination $IMG --destination $IMG2 --cache=${KANIKO_CACHE} --force --use-new-run
  tags:
    - no-cache
  retry: 2

dockerize-backend:
  variables:
    FOLDER: Backend
    # we build and deploy always to keep backend and frontend in sync
    RUN_ALWAYS: "yes"
    RUN_ON_FB: "yes"
    RUN_ON_MAIN: "yes"
    RUN_ON_TAG: "yes"
    KANIKO_CACHE: "true"
  <<: *dockerize-template
  <<: *rules-backend
  needs:
    - export-environment
  dependencies:
    - export-environment

dockerize-frontend:
  variables:
    FOLDER: Frontend
    # we build and deploy always to keep backend and frontend in sync
    RUN_ALWAYS: "yes"
    RUN_ON_FB: "yes"
    RUN_ON_MAIN: "yes"
    RUN_ON_TAG: "yes"
    KANIKO_CACHE: "true"
  <<: *dockerize-template
  <<: *rules-frontend
  needs:
    - build-frontend
    - export-environment
  dependencies:
    - build-frontend
    - export-environment

dockerize-crawler:
  variables:
    FOLDER: Crawler
    RUN_ALWAYS: "yes"
    # Yes? In case the build image fails this could help with MR?
    RUN_ON_FB: "yes"
    RUN_ON_MAIN: "yes"
    RUN_ON_TAG: "yes"
    KANIKO_CACHE: "true"
  <<: *dockerize-template
  <<: *rules-crawler
  needs:
    - export-environment
  dependencies:
    - export-environment

dockerize-tiles:
  variables:
    FOLDER: Tiles
    RUN_ALWAYS: "no"
    RUN_ON_FB: "no"
    RUN_ON_MAIN: "yes"
    RUN_ON_TAG: "yes"
    GIT_SUBMODULE_STRATEGY: "recursive"
    KANIKO_CACHE: "false"
  <<: *dockerize-template
  <<: *rules-tiles
  tags:
    - large-data
  needs:
    - export-environment
  dependencies:
    - export-environment

###########################################
# TEST CONTAINERS
###########################################

test-backend:
  stage: test:containers
  image:
    name: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
    entrypoint: ['']
  script:
    - source var.env
    - export $(grep -v '^#' var.env | xargs -d '\n')
    - cd ${FOLDER}
    - python -m unittest
  <<: *rules-backend
  variables:
    ENVIRONMENT: testing
    FOLDER: Backend
    # we build and deploy always to keep backend and frontend in sync
    RUN_ALWAYS: "yes"
    RUN_ON_FB: "yes"
    RUN_ON_MAIN: "yes"
    RUN_ON_TAG: "yes"
  needs:
    - export-environment
    - dockerize-backend
  dependencies:
    - export-environment
  retry: 2
  tags:
    - no-cache

###########################################
# DEPLOY NEW CLUSTER
###########################################

.deploy-script-new: &deploy-template-new
  stage: deploy
  image:
    name: alpine/helm:3.10.2
    entrypoint: ["sh", "-c", "apk add bash sed && /bin/bash"]
  script:
    - echo $KUBECONFIG
    - source var.env
    # DEBUG
    - cat var.env
    # using the app name converted to uppercase to generate the url accessor, result: URL_BACKEND
    - URL_ACCESSOR="URL_$(echo ${APP} | tr [:lower:] [:upper:])"
    # DEBUG
    - echo $URL_ACCESSOR
    # this will retrieve the content of the actual URL_BACKEND variable
    # works only with bash
    # - URL=${!URL_ACCESSOR}
    - URL=$(eval echo \$$URL_ACCESSOR)
    # DEBUG
    - echo ${URL}
    # generates the chart name using the environment name, replace all / with -; result: review-backend-100-fancify-pipeline
    - CHART_NAME=$(echo ${CI_ENVIRONMENT_NAME} | tr / - | cut -c -53 | sed -E 's#-+$##')
    # DEBUG
    - echo ${CHART_NAME}
    # delete old var.env file to not run into limit issues
    - rm var.env
    - echo "ENV_TYPE=${ENV_TYPE}" >> var.env
    - echo "URL_PROTOCOL=${URL_PROTOCOL}" >> var.env
    - echo "VERSION=${VERSION}" >> var.env
    # write the url into the var.env file for the dynamic env url generation
    - echo "URL=${URL}" >> var.env
    - cat var.env
    # use chart name and the folder by uppercasing the first character of the app name; result: Backend
    - helm upgrade --namespace=${K8_NAMESPACE} --dry-run --debug --install --set sha="${VERSION}" --set url=${URL} --set urlProtocol=${URL_PROTOCOL} --set environment=${ENV_TYPE} --set replicaCount=${REPLICA_COUNT} --set cpu.req=${CPU_REQ} --set cpu.limit=${CPU_LIMIT} --set mem.req=${MEM_REQ} --set mem.limit=${MEM_LIMIT} ${CHART_NAME} ./k8/${APP}-new
    - helm upgrade --namespace=${K8_NAMESPACE} --install --set sha="${VERSION}" --set url=${URL} --set urlProtocol=${URL_PROTOCOL} --set environment=${ENV_TYPE} --set replicaCount=${REPLICA_COUNT} --set cpu.req=${CPU_REQ} --set cpu.limit=${CPU_LIMIT} --set mem.req=${MEM_REQ} --set mem.limit=${MEM_LIMIT} ${CHART_NAME} ./k8/${APP}-new
  retry: 2
  tags:
    - no-cache

#--------------------
# BACKEND
#--------------------

.deploy-backend-new: &deploy-backend-new
  <<: *deploy-template-new
  <<: *rules-backend
  before_script:
    - export KUBECONFIG=$KUBECONFIG_NEW
  variables:
    APP: backend
    RUN_ON_FB: "no"
    RUN_ON_MAIN: "no"
    RUN_ON_TAG: "no"
  environment:
    url: $URL_PROTOCOL://$URL
    name: $ENV_TYPE/$APP/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $K8_NAMESPACE
  artifacts:
    reports:
      dotenv: var.env
  needs:
    - test-backend
    - dockerize-backend
    - export-environment
  dependencies:
    - dockerize-backend
    - export-environment

deploy-backend-fb-new:
  extends: .deploy-backend-new
  variables:
    ENV_TYPE: review
    RUN_ON_FB: "yes"
  environment:
    on_stop: remove-deployment-backend-review-new

deploy-backend-staging-new:
  extends: .deploy-backend-new
  before_script:
    - export KUBECONFIG=$KUBECONFIG_STAGING
  variables:
    ENV_TYPE: staging
    RUN_ON_MAIN: "yes"
    K8_NAMESPACE: covid-19-vis-staging

deploy-backend-production-new:
  extends: .deploy-backend-new
  before_script:
    - export KUBECONFIG=$KUBECONFIG_PRODUCTION
  variables:
    ENV_TYPE: production
    RUN_ON_TAG: "yes"
    K8_NAMESPACE: covid-19-vis-production
  environment:
    name: $ENV_TYPE/$APP


#--------------------
# FRONTEND
#--------------------

.deploy-frontend-new: &deploy-frontend-new
  <<: *deploy-template-new
  <<: *rules-frontend
  before_script:
    - export KUBECONFIG=$KUBECONFIG_NEW
  variables:
    APP: frontend
    RUN_ON_FB: "no"
    RUN_ON_MAIN: "no"
    RUN_ON_TAG: "no"
  environment:
    url: $URL_PROTOCOL://$URL
    name: $ENV_TYPE/$APP/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $K8_NAMESPACE
  artifacts:
    reports:
      dotenv: var.env
  needs:
    - dockerize-frontend
    - export-environment
  dependencies:
    - dockerize-frontend
    - export-environment


deploy-frontend-fb-new:
  extends: .deploy-frontend-new
  environment:
    on_stop: remove-deployment-frontend-review-new
  variables:
    ENV_TYPE: review
    RUN_ON_FB: "yes"

deploy-frontend-staging-new:
  extends: .deploy-frontend-new
  before_script:
    - export KUBECONFIG=$KUBECONFIG_STAGING
  variables:
    ENV_TYPE: staging
    RUN_ON_MAIN: "yes"
    K8_NAMESPACE: covid-19-vis-staging

deploy-frontend-production-new:
  extends: .deploy-frontend-new
  before_script:
    - export KUBECONFIG=$KUBECONFIG_PRODUCTION
  variables:
    ENV_TYPE: production
    RUN_ON_TAG: "yes"
    K8_NAMESPACE: covid-19-vis-production
  environment:
    name: $ENV_TYPE/$APP

#--------------------
# CRAWLER
#--------------------

.deploy-crawler-new: &deploy-crawler-new
  <<: *deploy-template-new
  <<: *rules-crawler
  before_script:
    - export KUBECONFIG=$KUBECONFIG_NEW
  variables:
    APP: crawler
    RUN_ON_FB: "no"
    RUN_ON_MAIN: "no"
    RUN_ON_TAG: "no"
  environment:
    # url: $URL_PROTOCOL://$URL
    name: $ENV_TYPE/$APP/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $K8_NAMESPACE
  artifacts:
    reports:
      dotenv: var.env
  needs:
    - dockerize-crawler
    - export-environment
  dependencies:
    - dockerize-crawler
    - export-environment

# deploy-crawler-fb:
#   extends: .deploy-crawler-new
#   variables:
#     ENV_TYPE: review
#     RUN_ON_FB: "yes"

# deploy-crawler-staging:
#   extends: .deploy-crawler-new
#   before_script:
#     - export KUBECONFIG=$KUBECONFIG_STAGING
#   variables:
#     ENV_TYPE: staging
#     RUN_ON_MAIN: "yes"
#     K8_NAMESPACE: covid-19-vis-staging

deploy-crawler-production-new:
  extends: .deploy-crawler-new
  before_script:
    - export KUBECONFIG=$KUBECONFIG_PRODUCTION
  variables:
    ENV_TYPE: production
    RUN_ON_TAG: "yes"
    K8_NAMESPACE: covid-19-vis-production
  environment:
    name: $ENV_TYPE/$APP

#--------------------
# TILES
#--------------------

.deploy-tiles-new: &deploy-tiles-new
  <<: *deploy-template-new
  <<: *rules-tiles
  before_script:
    - export KUBECONFIG=$KUBECONFIG_NEW
  variables:
    APP: tiles
    RUN_ON_FB: "no"
    RUN_ON_MAIN: "no"
    RUN_ON_TAG: "no"
  environment:
    url: $URL_PROTOCOL://$URL
    name: $ENV_TYPE/$APP/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $K8_NAMESPACE
  artifacts:
    reports:
      dotenv: var.env
  needs:
    - dockerize-tiles
    - export-environment
  dependencies:
    - dockerize-tiles
    - export-environment

# deploy-tiles-fb:
#   extends: .deploy-tiles-new
#   variables:
#     ENV_TYPE: review
#     RUN_ON_FB: "yes"

deploy-tiles-staging-new:
  extends: .deploy-tiles-new
  before_script:
    - export KUBECONFIG=$KUBECONFIG_STAGING
  variables:
    ENV_TYPE: staging
    RUN_ON_MAIN: "yes"
    K8_NAMESPACE: covid-19-vis-staging

deploy-tiles-production-new:
  extends: .deploy-tiles-new
  before_script:
    - export KUBECONFIG=$KUBECONFIG_PRODUCTION
  variables:
    ENV_TYPE: production
    RUN_ON_TAG: "yes"
    K8_NAMESPACE: covid-19-vis-production
  environment:
    name: $ENV_TYPE/$APP

###########################################
# CLEANUP NEW ENV
###########################################

.remove-deployment-new:
  stage: deploy
  image:
    name: alpine/helm:3.10.2
    entrypoint: ["sh", "-c", "apk add bash && /bin/bash"]
  variables:
    GIT_STRATEGY: none
    RUN_ON_FB: "no"
    RUN_ON_MAIN: "no"
    RUN_ON_TAG: "no"
  script:
    - export KUBECONFIG=$KUBECONFIG_NEW
    - echo $KUBECONFIG
    - CHART_NAME=$(echo "${ENV_TYPE}/${APP}/${CI_COMMIT_REF_SLUG}" | tr / - | cut -c -53 | sed -E 's#-+$##')
    # DEBUG
    - echo $CHART_NAME
    - helm delete --namespace=${K8_NAMESPACE} --dry-run --debug ${CHART_NAME}
    - helm delete --namespace=${K8_NAMESPACE} ${CHART_NAME}
  dependencies: []
  allow_failure: true
  retry: 2
  tags:
    - no-cache

remove-deployment-backend-review-new:
  extends: .remove-deployment-new
  <<: *rules-backend-cleanup
  variables:
    APP: backend
    ENV_TYPE: review
    RUN_ON_FB: "yes"
  environment:
    name: $ENV_TYPE/$APP/$CI_COMMIT_REF_SLUG
    action: stop

remove-deployment-frontend-review-new:
  extends: .remove-deployment-new
  <<: *rules-frontend-cleanup
  variables:
    APP: frontend
    ENV_TYPE: review
    RUN_ON_FB: "yes"
  environment:
    name: $ENV_TYPE/$APP/$CI_COMMIT_REF_SLUG
    action: stop
