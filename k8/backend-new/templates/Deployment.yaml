kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "lingvis.labels" . | nindent 4 }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "lingvis.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "lingvis.labels" . | nindent 8 }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: deploymentName
                operator: In
                values:
                - {{ .Release.Name }}
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: backend
          image: "registry.dbvis.de/jentner/covid-19-vis/backend:{{ .Values.sha }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: DB_PORT
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: DB_USER
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: DB_PASS
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: DB_NAME
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: sentry
                  key: SENTRY_DSN
            - name: APP_KEY
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: APP_KEY
            - name: APP_HASH_SALT
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: APP_HASH_SALT
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: API_KEY
            - name: MAIL_SERVER
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: MAIL_SERVER
            - name: MAIL_PORT
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: MAIL_PORT
            - name: MAIL_USE_TLS
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: MAIL_USE_TLS
            - name: MAIL_USE_SSL
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: MAIL_USE_SSL
            - name: MAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: MAIL_USERNAME
            - name: MAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: MAIL_PASSWORD
            - name: MAIL_DEFAULT_SENDER
              valueFrom:
                secretKeyRef:
                  name: database-info
                  key: MAIL_DEFAULT_SENDER
            - name: VERSION
              value: {{ .Values.sha | quote }}
            - name: ENVIRONMENT
              value: {{ .Values.environment | quote }}
            - name: TZ
              value: UTC
          readinessProbe:
            httpGet:
              path: "/health"
              port: 5000
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: "/health"
              port: 5000
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 4
            successThreshold: 1
          resources:
            requests:
              cpu: {{ .Values.cpu.req }}
              memory: {{ .Values.mem.req }}
            limits:
              cpu: {{ .Values.cpu.limit }}
              memory: {{ .Values.mem.limit }}
          volumeMounts:                                  
            - mountPath: "/var/opt/gis/data-risklayer"
              name: vol-risklayer-spreadsheet-archive 
      volumes:
        - name: vol-risklayer-spreadsheet-archive
          persistentVolumeClaim:
            claimName: pvc-covid19vis-crawler-risklayer-lk    # this must match the name of your PVC
      imagePullSecrets:
          - name: regcred-server
